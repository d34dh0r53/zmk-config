/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

/ {
    behaviors {
        #include "macros.dtsi"
        #include "version.dtsi"

        hml: timeless_hrm_left {
            compatible = "zmk,behavior-hold-tap";
            label = "TIMELESS_LEFT";
            flavor = "balanced";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
            hold-trigger-on-release;
        };

        hmls: timeless_hrm_left_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "TIMELESS_LEFT_SHIFT";
            flavor = "balanced";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <50>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
            hold-trigger-on-release;
        };
        
        tlh: timeless_layer_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "TIMELESS_LAYER_HOLD";
            flavor = "balanced";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <100>;
            global-quick-tap;
            bindings = <&mo>, <&kp>;
            hold-trigger-on-release;
        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <195>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
        };

        td: tap_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE";
            #binding-cells = <0>;
            bindings = <&kp Z>, <&kp ESCAPE>;
        };

        hp: hold_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_PREFERRED";
            #binding-cells = <2>;
            tapping-term-ms = <220>;
            flavor = "hold-preferred";
            bindings = <&kp>, <&kp>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <125>;
        };

        lh: layer_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "layer_hold";
            bindings = <&mo>, <&kp>;
            flavor = "tap-preferred";
            #binding-cells = <2>;
            quick-tap-ms = <175>;
            tapping-term-ms = <185>;
        };
    };

    combos { compatible = "zmk,combos"; };

    macros {
        l_hyper: l_hyper {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(LS(LEFT_GUI)))>;
            label = "L_HYPER";
        };

        r_hyper: r_hyper {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RC(RA(RS(RGUI)))>;
            label = "R_HYPER";
        };

        l_meh: l_meh {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LS(LCTRL))>;
            label = "L_MEH";
        };

        r_meh: r_meh {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(RS(RCTRL))>;
            label = "R_MEH";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&none  &none        &none        &none         &none          &none  &none                                                                       &none          &none  &none          &none         &none        &none          &none
&none  &kp Q        &kp W        &kp E         &kp R          &kp T  &kp LS(LG(C))                                                               &kp F12        &kp Y  &kp U          &kp I         &kp O        &kp P          &none
&none  &hml LGUI A  &hml LALT S  &hml LCTRL D  &hmls LSHIFT F  &kp G  &kp LS(LA(LC(LG(Z))))  &none      &none             &none      &none        &kp LG(ENTER)  &kp H  &hmls RSHIFT J  &hml RCTRL K  &hml RALT L  &hml RGUI SQT  &none
&none  &td          &kp X        &kp C         &kp V          &kp B                                    &none             &none                                  &kp N  &kp M          &kp COMMA     &kp DOT      &lh 3 SLASH    &none
&none  &none        &none        &none         &none                 &tlh 1 BACKSPACE        &tlh 2 TAB  &tlh 4 ESCAPE      &tlh 7 DEL  &tlh 6 ENTER  &tlh 5 SPACE           &none          &none         &none        &none          &none
            >;

            label = "Base";
        };

        Nav {
            bindings = <
&trans  &trans    &trans    &trans     &trans      &trans  &trans                                      &trans  &trans      &trans     &trans         &trans     &trans      &trans
&trans  &trans    &trans    &trans     &trans      &trans  &trans                                      &trans  &kp CAPS    &kp LC(V)  &kp LC(C)      &kp LC(X)  &kp LC(Z)   &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHIFT  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &kp LEFT    &kp DOWN   &kp UP         &kp RIGHT  &caps_word  &trans
&trans  &trans    &trans    &trans     &trans      &trans                  &trans      &trans                  &kp INSERT  &kp HOME   &kp PAGE_DOWN  &kp PG_UP  &kp END     &trans
&trans  &trans    &trans    &trans     &trans              &trans  &trans  &trans      &trans  &trans  &trans              &trans     &trans         &trans     &trans      &trans
            >;
        };

        Mouse {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans  &trans                                            &trans     &trans  &trans          &trans        &trans           &trans     &trans
&trans  &trans    &trans    &trans     &trans     &trans  &trans                                            &trans     &trans  &kp LG(V)       &kp LG(C)     &kp LG(X)        &kp LG(Z)  &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans  &trans  &trans  &trans      &trans     &trans     &trans     &trans  &trans          &trans        &trans           &trans     &trans
&trans  &trans    &trans    &trans     &trans     &trans                  &trans      &trans                           &trans  &trans          &trans        &trans           &trans     &trans
&trans  &trans    &trans    &trans     &trans             &trans  &trans  &trans      &mkp MCLK  &mkp LCLK  &mkp RCLK                    &trans          &trans        &trans           &trans     &trans
            >;
        };

        Button {
            bindings = <
&trans  &trans     &trans     &trans     &trans     &trans    &trans                                                     &trans     &trans    &trans     &trans     &trans    &trans    &trans
&trans  &kp LC(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)  &l_hyper  &trans                                                     &trans     &r_hyper  &kp V      &kp C      &kp X     &kp Z     &trans
&trans  &kp LGUI   &kp LALT   &kp LCTRL  &kp LSHFT  &trans    &trans     &trans     &trans         &trans     &trans     &trans     &trans    &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &trans
&trans  &trans     &kp X      &kp C      &kp V      &l_meh                          &trans         &trans                           &r_meh    &kp V      &kp C      &kp X     &trans    &trans
&trans  &trans     &trans     &trans     &trans               &mkp RCLK  &mkp LCLK  &mkp MCLK      &mkp MCLK  &mkp LCLK  &mkp RCLK            &trans     &trans     &trans    &trans    &trans
            >;
        };

        Media {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans  &trans                                                    &trans      &trans        &trans             &trans           &trans              &trans  &trans
&trans  &trans    &trans    &trans     &trans     &trans  &trans                                                    &trans      &bl BL_TOG    &bl BL_DEC         &bl BL_INC       &bl BL_CYCLE        &trans  &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans  &trans  &trans  &trans      &trans      &trans            &trans      &kp C_REWIND  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_FAST_FORWARD  &trans  &trans
&trans  &trans    &trans    &trans     &trans     &trans                  &trans      &trans                                    &kp C_SLEEP   &kp C_BRI_DEC      &kp C_BRI_INC    &ext_power EP_TOG   &trans  &trans
&trans  &trans    &trans    &trans     &trans             &trans  &trans  &trans      &kp C_MUTE  &kp C_PLAY_PAUSE  &kp C_STOP                &trans             &trans           &trans              &trans  &trans
            >;
        };

        Number {
            bindings = <
&trans  &trans     &trans  &trans  &trans  &trans     &trans                                          &trans  &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp LBKT   &kp N7  &kp N8  &kp N9  &kp RBKT   &trans                                          &trans  &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp SEMI   &kp N4  &kp N5  &kp N6  &kp EQUAL  &trans  &trans     &trans       &trans  &trans  &trans  &trans  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &trans
&trans  &kp GRAVE  &kp N1  &kp N2  &kp N3  &kp BSLH                      &trans       &trans                  &trans  &trans     &trans     &trans    &trans    &trans
&trans  &trans     &trans  &trans  &trans             &kp N0  &kp MINUS  &kp DOT      &trans  &trans  &trans          &trans     &trans     &trans    &trans    &trans
            >;
        };

        Sym {
            bindings = <
&trans  &trans         &trans        &trans         &trans         &trans        &trans                                                         &trans  &trans     &trans     &trans    &trans    &trans  &trans
&trans  &kp LS(LBRC)   &kp LS(AMPS)  &kp LS(STAR)   &kp LS(LPAR)   &kp LS(RBRC)  &kp BSPC                                                       &trans  &trans     &trans     &trans    &trans    &trans  &trans
&trans  &kp LS(COLON)  &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)  &kp LS(PLUS)  &trans        &trans         &trans            &trans  &trans  &trans  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &trans  &trans
&trans  &kp LS(TILDE)  &kp LS(EXCL)  &kp LS(AT)     &kp LS(POUND)  &kp LS(PIPE)                               &trans            &trans                  &trans     &trans     &trans    &trans    &trans  &trans
&trans  &trans         &trans        &trans         &trans                       &kp LS(RPAR)  &kp LS(UNDER)  &kp LS(LPAR)      &trans  &trans  &trans             &trans     &trans    &trans    &trans  &trans
            >;
        };

        Fun {
            bindings = <
&trans  &trans   &trans  &trans  &trans  &trans          &trans                                          &trans  &trans     &trans     &trans    &trans    &trans  &trans
&trans  &kp F12  &kp F7  &kp F8  &kp F9  &kp SYSREQ      &trans                                          &trans  &trans     &trans     &trans    &trans    &trans  &trans
&trans  &kp F11  &kp F4  &kp F5  &kp F6  &kp SCROLLLOCK  &trans     &trans   &trans      &trans  &trans  &trans  &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI  &trans  &trans
&trans  &kp F10  &kp F1  &kp F2  &kp F3  &kp C_PAUSE                         &trans      &trans                  &trans     &trans     &trans    &trans    &trans  &trans
&trans  &trans   &trans  &trans  &trans                  &kp SPACE  &kp TAB  &trans      &trans  &trans  &trans             &trans     &trans    &trans    &trans  &trans
            >;
        };
    };
};
